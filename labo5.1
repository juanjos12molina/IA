{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyPsLoEZxAojgYNjIQS5yFIE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"5w3m0Z5pn-ol"},"outputs":[],"source":["import os\n","import numpy as np\n","from matplotlib import pyplot\n","from scipy import optimize\n","%matplotlib inline\n","import csv\n","import pandas as pd"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CxsJdAGNrPQy","executionInfo":{"status":"ok","timestamp":1714393123456,"user_tz":240,"elapsed":2607,"user":{"displayName":"Juan Jose Monta�o Molina","userId":"08954148293048957888"}},"outputId":"46f3ca93-7eb9-42e3-edce-b7b093fe8239"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["df = pd.read_csv(\"/content/gdrive/MyDrive/IA/dataset/lc_2016_2017.csv\", sep=\",\")\n","diccionario = {\"36 months\": 0, \"60 months\": 1}\n","df[\"term\"] = df[\"term\"].replace(diccionario)\n","diccionario = {\"A\": 0, \"B\": 1, \"C\": 2, \"D\": 3, \"E\": 4, \"F\": 5, \"G\": 6}\n","df[\"grade\"] = df[\"grade\"].replace(diccionario)\n","diccionario = {\"C1\": 0, \"B5\": 1, \"C4\": 2, \"C2\": 3, \"B4\": 4, \"C5\": 5, \"C3\": 6, \"B1\": 7, \"B3\": 8, \"B2\": 9, \"A1\": 10, \"A5\": 11, \"D1\": 12, \"A4\": 13, \"D2\": 14, \"D3\": 15, \"A2\": 16, \"A3\": 17, \"D4\": 18, \"D5\": 19, \"E1\": 20, \"E2\": 21, \"E3\": 22, \"E5\": 23, \"E4\": 24, \"F1\": 25, \"F2\": 26, \"F3\": 27, \"F4\": 28, \"F5\": 29, \"G1\": 30, \"G2\": 31, \"G3\": 32, \"G4\": 33, \"G5\": 34}\n","df[\"sub_grade\"] = df[\"sub_grade\"].replace(diccionario)\n","diccionario = {\n","  \"MORTGAGE\": 0,\n","  \"RENT\": 1,\n","  \"OWN\": 2,\n","  \"ANY\": 3,\n","  \"NONE\": 4\n","}\n","df[\"home_ownership\"] = df[\"home_ownership\"].replace(diccionario)\n","diccionario = {\n","  \"Source Verified\": 0,\n","  \"Not Verified\": 1,\n","  \"Verified\": 2,\n","}\n","df[\"verification_status\"] = df[\"verification_status\"].replace(diccionario)\n","diccionario = {\n","  \"Mar-2016\": 0,\n","  \"Aug-2017\": 1,\n","  \"Sep-2017\": 2,\n","  \"Feb-2016\": 3,\n","  \"Jul-2017\": 4,\n","  \"Jun-2017\": 5,\n","  \"May-2017\": 6,\n","  \"Mar-2017\": 7,\n","  \"Apr-2016\": 8,\n","  \"Aug-2016\": 9,\n","  \"Dec-2016\": 10,\n","  \"Jul-2016\": 11,\n","  \"Nov-2016\": 12,\n","  \"Jun-2016\": 13,\n","  \"Oct-2016\": 14,\n","  \"Jan-2016\": 15,\n","  \"Jan-2017\": 16,\n","  \"Apr-2017\": 17,\n","  \"May-2016\": 18,\n","  \"Sep-2016\": 19,\n","  \"Feb-2017\": 20\n","}\n","df[\"issue_d\"] = df[\"issue_d\"].replace(diccionario)\n","diccionario = {\n","  \"Current\": 0,\n","  \"Fully Paid\": 1,\n","  \"Charged Off\": 2,\n","  \"Late (31-120 days)\": 3,\n","  \"In Grace Period\": 4,\n","  \"Late (16-30 days)\": 5,\n","  \"Default\": 6\n","}\n","df[\"loan_status\"] = df[\"loan_status\"].replace(diccionario)\n","diccionario = {\n","  \"n\": 0,\n","  \"y\": 1,\n","}\n","df[\"pymnt_plan\"] = df[\"pymnt_plan\"].replace(diccionario)\n","diccionario = {\n","  \"debt_consolidation\": 0,\n","  \"credit_card\": 1,\n","  \"home_improvement\": 2,\n","  \"other\": 3,\n","  \"major_purchase\": 4,\n","  \"medical\": 5,\n","  \"car\": 6,\n","  \"small_business\": 7,\n","  \"vacation\": 8,\n","  \"moving\": 9,\n","  \"house\": 10,\n","  \"renewable_energy\": 11,\n","  \"wedding\": 12\n","}\n","df[\"purpose\"] = df[\"purpose\"].replace(diccionario)\n","diccionario = {\n","  \"CA\": 0,\n","  \"TX\": 1,\n","  \"NY\": 2,\n","  \"FL\": 3,\n","  \"IL\": 4,\n","  \"NJ\": 5,\n","  \"OH\": 6,\n","  \"PA\": 7,\n","  \"GA\": 8,\n","  \"NC\": 9,\n","  \"VA\": 10,\n","  \"MI\": 11,\n","  \"AZ\": 12,\n","  \"MD\": 13,\n","  \"MA\": 14,\n","  \"CO\": 15,\n","  \"WA\": 16,\n","  \"MN\": 17,\n","  \"IN\": 18,\n","  \"TN\": 19,\n","  \"CT\": 20,\n","  \"MO\": 21,\n","  \"NV\": 22,\n","  \"WI\": 23,\n","  \"SC\": 24,\n","  \"AL\": 25,\n","  \"LA\": 26,\n","  \"OR\": 27,\n","  \"KY\": 28,\n","  \"OK\": 29,\n","  \"KS\": 30,\n","  \"AR\": 31,\n","  \"MS\": 32,\n","  \"UT\": 33,\n","  \"NM\": 34,\n","  \"NH\": 35,\n","  \"NE\": 36,\n","  \"HI\": 37,\n","  \"RI\": 38,\n","  \"ME\": 39,\n","  \"ID\": 40,\n","  \"DE\": 41,\n","  \"MT\": 42,\n","  \"ND\": 43,\n","  \"AK\": 44,\n","  \"VT\": 45,\n","  \"DC\": 46,\n","  \"WY\": 47,\n","  \"SD\": 48,\n","  \"WV\": 49\n","}\n","df[\"addr_state\"] = df[\"addr_state\"].replace(diccionario)\n","diccionario = {\n","  \"w\": 0,\n","  \"f\": 1,\n","}\n","df[\"initial_list_status\"] = df[\"initial_list_status\"].replace(diccionario)\n","diccionario = {\n","  \"Individual\": 0,\n","  \"Joint App\": 1,\n","}\n","df[\"application_type\"] = df[\"application_type\"].replace(diccionario)\n","\n","df = df.drop('member_id', axis=1)\n","df = df.drop('id', axis=1)\n","df = df.drop('total_bal_il', axis=1)\n","df = df.drop('il_util', axis=1)\n","df = df.drop('open_rv_12m', axis=1)\n","df = df.drop('emp_title', axis=1)\n","df = df.drop('open_il_12m', axis=1)\n","df = df.drop('emp_length', axis=1)\n","df = df.drop('open_acc_6m', axis=1)\n","df = df.drop('mths_since_rcnt_il', axis=1)\n","df = df.drop('open_rv_24m', axis=1)\n","df = df.drop('open_il_24m', axis=1)\n","df = df.drop('max_bal_bc', axis=1)\n","df = df.drop('all_util', axis=1)\n","df = df.drop('annual_inc_joint', axis=1)\n","df = df.drop('dti_joint', axis=1)\n","df = df.drop('verification_status_joint', axis=1)\n","df = df.drop('mths_since_last_major_derog', axis=1)\n","df = df.drop('desc', axis=1)\n","df = df.drop('title', axis=1)\n","df = df.drop('zip_code', axis=1)\n","df = df.drop('dti', axis=1)\n","df = df.drop('inq_last_6mths', axis=1)\n","df = df.drop('mths_since_last_delinq', axis=1)\n","df = df.drop('mths_since_last_record', axis=1)\n","df = df.drop('inq_last_12m', axis=1)\n","df = df.drop('total_cu_tl', axis=1)\n","df = df.drop('inq_fi', axis=1)\n","df = df.drop('revol_util', axis=1)\n","df = df.drop('last_pymnt_d', axis=1)\n","df = df.drop('next_pymnt_d', axis=1)\n","df = df.drop('last_credit_pull_d', axis=1)\n","df = df.drop('earliest_cr_line', axis=1)\n","\n","\n","df['loan_amnt'] = df['loan_amnt'].astype(int)\n","df['funded_amnt_inv'] = df['funded_amnt_inv'].astype(int)\n","df['term'] = df['term'].astype(int)\n","df['int_rate'] = df['int_rate'].astype(int)\n","df['installment'] = df['installment'].astype(int)\n","df['grade'] = df['grade'].astype(int)\n","df['sub_grade'] = df['sub_grade'].astype(int)\n","df['home_ownership'] = df['home_ownership'].astype(int)\n","df['annual_inc'] = df['annual_inc'].astype(int)\n","df['revol_bal'] = df['revol_bal'].astype(int)\n","df['out_prncp'] = df['out_prncp'].astype(int)\n","df['out_prncp_inv'] = df['out_prncp_inv'].astype(int)\n","df['total_pymnt'] = df['total_pymnt'].astype(int)\n","df['total_pymnt_inv'] = df['total_pymnt_inv'].astype(int)\n","df['total_rec_prncp'] = df['total_rec_prncp'].astype(int)\n","df['total_rec_int'] = df['total_rec_int'].astype(int)\n","df['total_rec_late_fee'] = df['total_rec_late_fee'].astype(int)\n","df['recoveries'] = df['recoveries'].astype(int)\n","df['collection_recovery_fee'] = df['collection_recovery_fee'].astype(int)\n","df['last_pymnt_amnt'] = df['last_pymnt_amnt'].astype(int)\n","df['tot_coll_amt'] = df['tot_coll_amt'].astype(int)\n","df['tot_cur_bal'] = df['tot_cur_bal'].astype(int)\n","df['total_rev_hi_lim'] = df['total_rev_hi_lim'].astype(int)\n","columna_mover = 'loan_status'\n","\n","# Crear una nueva lista de nombres de columnas con 'loan_status' en la última posición\n","nuevas_columnas = df.columns.tolist()\n","nuevas_columnas.remove(columna_mover)\n","nuevas_columnas.append(columna_mover)\n","\n","# Mover la columna usando reindex\n","df = df.reindex(columns=nuevas_columnas)\n","df.drop_duplicates()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":478},"id":"GzNj_hS9rj7o","outputId":"e6ce2d48-1e1e-48e6-a73b-0cdca7cb17e4","executionInfo":{"status":"ok","timestamp":1714399273994,"user_tz":240,"elapsed":25644,"user":{"displayName":"Juan Jose Monta�o Molina","userId":"08954148293048957888"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-108-5b174fff64fd>:1: DtypeWarning: Columns (18,54) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv(\"/content/gdrive/MyDrive/IA/dataset/lc_2016_2017.csv\", sep=\",\")\n"]},{"output_type":"execute_result","data":{"text/plain":["        loan_amnt  funded_amnt  funded_amnt_inv  term  int_rate  installment  \\\n","0            2300         2300             2300     0        12           77   \n","1           16000        16000            16000     1        12          360   \n","2            6025         6025             6025     0        15          209   \n","3           20400        20400            20400     0         9          652   \n","4           13000        13000            13000     0        11          431   \n","...           ...          ...              ...   ...       ...          ...   \n","759333       6000         6000             6000     0         7          187   \n","759334       6000         6000             6000     0         9          191   \n","759335      14400        14400            14400     1        13          328   \n","759336      34050        34050            34050     0        15         1187   \n","759337       5000         5000             5000     0        11          164   \n","\n","        grade  sub_grade  home_ownership  annual_inc  ...  \\\n","0           2          0               2       10000  ...   \n","1           2          0               0       94000  ...   \n","2           2          2               0       46350  ...   \n","3           1          7               1       44000  ...   \n","4           1          1               0       85000  ...   \n","...       ...        ...             ...         ...  ...   \n","759333      0         11               2       38000  ...   \n","759334      1          9               1       32640  ...   \n","759335      2          6               1       47000  ...   \n","759336      3         12               0       87800  ...   \n","759337      1          1               0       65000  ...   \n","\n","        collection_recovery_fee  last_pymnt_amnt  collections_12_mths_ex_med  \\\n","0                             0               77                           0   \n","1                             0              360                           0   \n","2                             0              209                           0   \n","3                             0              652                           0   \n","4                             0              431                           0   \n","...                         ...              ...                         ...   \n","759333                        0              187                           0   \n","759334                        0              191                           0   \n","759335                        0              328                           0   \n","759336                        0             1187                           0   \n","759337                        0              164                           0   \n","\n","        policy_code  application_type  acc_now_delinq  tot_coll_amt  \\\n","0                 1                 0               0             0   \n","1                 1                 0               0             0   \n","2                 1                 0               0             0   \n","3                 1                 0               0             0   \n","4                 1                 0               0             0   \n","...             ...               ...             ...           ...   \n","759333            1                 0               0             0   \n","759334            1                 0               0             0   \n","759335            1                 0               0             0   \n","759336            1                 0               0             0   \n","759337            1                 0               0             0   \n","\n","        tot_cur_bal  total_rev_hi_lim  loan_status  \n","0              3911              7100            0  \n","1            234457             31900            0  \n","2            121311             27700            0  \n","3             62335             46900            0  \n","4             15332              7800            0  \n","...             ...               ...          ...  \n","759333         9223             21400            0  \n","759334        30895             18600            0  \n","759335        35979             18300            5  \n","759336       104560             47900            0  \n","759337       206884             12000            0  \n","\n","[759338 rows x 39 columns]"],"text/html":["\n","  <div id=\"df-30f26d0f-7e60-4174-b040-5e482c14f78d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>loan_amnt</th>\n","      <th>funded_amnt</th>\n","      <th>funded_amnt_inv</th>\n","      <th>term</th>\n","      <th>int_rate</th>\n","      <th>installment</th>\n","      <th>grade</th>\n","      <th>sub_grade</th>\n","      <th>home_ownership</th>\n","      <th>annual_inc</th>\n","      <th>...</th>\n","      <th>collection_recovery_fee</th>\n","      <th>last_pymnt_amnt</th>\n","      <th>collections_12_mths_ex_med</th>\n","      <th>policy_code</th>\n","      <th>application_type</th>\n","      <th>acc_now_delinq</th>\n","      <th>tot_coll_amt</th>\n","      <th>tot_cur_bal</th>\n","      <th>total_rev_hi_lim</th>\n","      <th>loan_status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2300</td>\n","      <td>2300</td>\n","      <td>2300</td>\n","      <td>0</td>\n","      <td>12</td>\n","      <td>77</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>10000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>77</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3911</td>\n","      <td>7100</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>16000</td>\n","      <td>16000</td>\n","      <td>16000</td>\n","      <td>1</td>\n","      <td>12</td>\n","      <td>360</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>94000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>360</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>234457</td>\n","      <td>31900</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6025</td>\n","      <td>6025</td>\n","      <td>6025</td>\n","      <td>0</td>\n","      <td>15</td>\n","      <td>209</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>46350</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>209</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>121311</td>\n","      <td>27700</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>20400</td>\n","      <td>20400</td>\n","      <td>20400</td>\n","      <td>0</td>\n","      <td>9</td>\n","      <td>652</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>44000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>652</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>62335</td>\n","      <td>46900</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>13000</td>\n","      <td>13000</td>\n","      <td>13000</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>431</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>85000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>431</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>15332</td>\n","      <td>7800</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>759333</th>\n","      <td>6000</td>\n","      <td>6000</td>\n","      <td>6000</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>187</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>2</td>\n","      <td>38000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>187</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>9223</td>\n","      <td>21400</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>759334</th>\n","      <td>6000</td>\n","      <td>6000</td>\n","      <td>6000</td>\n","      <td>0</td>\n","      <td>9</td>\n","      <td>191</td>\n","      <td>1</td>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>32640</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>191</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30895</td>\n","      <td>18600</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>759335</th>\n","      <td>14400</td>\n","      <td>14400</td>\n","      <td>14400</td>\n","      <td>1</td>\n","      <td>13</td>\n","      <td>328</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>47000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>328</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>35979</td>\n","      <td>18300</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>759336</th>\n","      <td>34050</td>\n","      <td>34050</td>\n","      <td>34050</td>\n","      <td>0</td>\n","      <td>15</td>\n","      <td>1187</td>\n","      <td>3</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>87800</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1187</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>104560</td>\n","      <td>47900</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>759337</th>\n","      <td>5000</td>\n","      <td>5000</td>\n","      <td>5000</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>164</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>65000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>164</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>206884</td>\n","      <td>12000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>759338 rows × 39 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-30f26d0f-7e60-4174-b040-5e482c14f78d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-30f26d0f-7e60-4174-b040-5e482c14f78d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-30f26d0f-7e60-4174-b040-5e482c14f78d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fb4993c7-e55f-4e53-8d5a-339be70e116b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fb4993c7-e55f-4e53-8d5a-339be70e116b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fb4993c7-e55f-4e53-8d5a-339be70e116b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":108}]},{"cell_type":"code","source":["df[\"loan_status\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ROrttV4MsROR","executionInfo":{"status":"ok","timestamp":1714399278174,"user_tz":240,"elapsed":294,"user":{"displayName":"Juan Jose Monta�o Molina","userId":"08954148293048957888"}},"outputId":"0d0a47a0-5ef3-4f7e-bca4-90e1067429af"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["loan_status\n","0    565523\n","1    130718\n","2     37197\n","3     15354\n","4      6634\n","5      3876\n","6        36\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":109}]},{"cell_type":"code","source":["print(df.info())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1EElxRazvIgw","executionInfo":{"status":"ok","timestamp":1714399279868,"user_tz":240,"elapsed":315,"user":{"displayName":"Juan Jose Monta�o Molina","userId":"08954148293048957888"}},"outputId":"0fcb0f77-b9e8-46ed-cc4b-e78199d2fa5a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 759338 entries, 0 to 759337\n","Data columns (total 39 columns):\n"," #   Column                      Non-Null Count   Dtype\n","---  ------                      --------------   -----\n"," 0   loan_amnt                   759338 non-null  int64\n"," 1   funded_amnt                 759338 non-null  int64\n"," 2   funded_amnt_inv             759338 non-null  int64\n"," 3   term                        759338 non-null  int64\n"," 4   int_rate                    759338 non-null  int64\n"," 5   installment                 759338 non-null  int64\n"," 6   grade                       759338 non-null  int64\n"," 7   sub_grade                   759338 non-null  int64\n"," 8   home_ownership              759338 non-null  int64\n"," 9   annual_inc                  759338 non-null  int64\n"," 10  verification_status         759338 non-null  int64\n"," 11  issue_d                     759338 non-null  int64\n"," 12  pymnt_plan                  759338 non-null  int64\n"," 13  purpose                     759338 non-null  int64\n"," 14  addr_state                  759338 non-null  int64\n"," 15  delinq_2yrs                 759338 non-null  int64\n"," 16  open_acc                    759338 non-null  int64\n"," 17  pub_rec                     759338 non-null  int64\n"," 18  revol_bal                   759338 non-null  int64\n"," 19  total_acc                   759338 non-null  int64\n"," 20  initial_list_status         759338 non-null  int64\n"," 21  out_prncp                   759338 non-null  int64\n"," 22  out_prncp_inv               759338 non-null  int64\n"," 23  total_pymnt                 759338 non-null  int64\n"," 24  total_pymnt_inv             759338 non-null  int64\n"," 25  total_rec_prncp             759338 non-null  int64\n"," 26  total_rec_int               759338 non-null  int64\n"," 27  total_rec_late_fee          759338 non-null  int64\n"," 28  recoveries                  759338 non-null  int64\n"," 29  collection_recovery_fee     759338 non-null  int64\n"," 30  last_pymnt_amnt             759338 non-null  int64\n"," 31  collections_12_mths_ex_med  759338 non-null  int64\n"," 32  policy_code                 759338 non-null  int64\n"," 33  application_type            759338 non-null  int64\n"," 34  acc_now_delinq              759338 non-null  int64\n"," 35  tot_coll_amt                759338 non-null  int64\n"," 36  tot_cur_bal                 759338 non-null  int64\n"," 37  total_rev_hi_lim            759338 non-null  int64\n"," 38  loan_status                 759338 non-null  int64\n","dtypes: int64(39)\n","memory usage: 225.9 MB\n","None\n"]}]},{"cell_type":"code","source":["#Se asignan los valore de X y X_test respectivamente 70% 30%\n","X = df.iloc[:531537, :-1]\n","X_test = df.iloc[531537:, :-1]\n","#Se asignan los valore de y e y_test respectivamente 70% 30%\n","y = df.iloc[:531537, df.columns.get_loc(\"loan_status\")]\n","y_test = df.iloc[531537:, df.columns.get_loc(\"loan_status\")]"],"metadata":{"id":"v_YMayWVDb2z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(X.shape)\n","print(y.shape)\n","print(X_test.shape)\n","print(y_test.shape)\n","\n","\n","# print(X)\n","print(y)\n","print(y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EG5_uxq4EHHi","executionInfo":{"status":"ok","timestamp":1714399284140,"user_tz":240,"elapsed":285,"user":{"displayName":"Juan Jose Monta�o Molina","userId":"08954148293048957888"}},"outputId":"e867c989-6402-4360-9d95-f1c304c65bf2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(531537, 38)\n","(531537,)\n","(227801, 38)\n","(227801,)\n","0         0\n","1         0\n","2         0\n","3         0\n","4         0\n","         ..\n","531532    0\n","531533    0\n","531534    0\n","531535    0\n","531536    0\n","Name: loan_status, Length: 531537, dtype: int64\n","531537    0\n","531538    4\n","531539    0\n","531540    0\n","531541    0\n","         ..\n","759333    0\n","759334    0\n","759335    5\n","759336    0\n","759337    0\n","Name: loan_status, Length: 227801, dtype: int64\n"]}]},{"cell_type":"code","source":["# Configurando parametros necesario\n","input_layer_size  = 38  # Entrada de 13 caracteristicas\n","hidden_layer_size = 20   # 10 unidades ocultas\n","num_labels = 7          # 3 etiquetas, de 0 a 6\n","\n","pesos = {}\n","pesos['Theta1'] = np.random.rand(20, 39)\n","pesos['Theta2'] = np.random.rand(7, 21)\n","Theta1, Theta2 = pesos['Theta1'], pesos['Theta2']\n","\n","print(Theta1.ravel().shape)\n","print(Theta2.ravel().shape)\n","\n","nn_params = np.concatenate([Theta1.ravel(), Theta2.ravel()])\n","print(nn_params.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7cCzHdqJFDBt","executionInfo":{"status":"ok","timestamp":1714405367977,"user_tz":240,"elapsed":270,"user":{"displayName":"Juan Jose Monta�o Molina","userId":"08954148293048957888"}},"outputId":"343222d4-87f9-465f-8d98-da847e3be3dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(780,)\n","(147,)\n","(927,)\n"]}]},{"cell_type":"code","source":["def sigmoid(z):\n","    return 1.0 / (1.0 + np.exp(-z))\n","\n","def sigmoidGradient(z):\n","\n","    g = np.zeros(z.shape)\n","\n","    g = sigmoid(z) * (1 - sigmoid(z))\n","\n","    return g"],"metadata":{"id":"DbK5tFvaGx1Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def sigmoidGradient(z):\n","\n","    g = np.zeros(z.shape)\n","\n","    g = sigmoid(z) * (1 - sigmoid(z))\n","\n","    return g"],"metadata":{"id":"df7VZz_NhRup"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def nnCostFunction(nn_params,\n","                   input_layer_size,\n","                   hidden_layer_size,\n","                   num_labels,\n","                   X, y, lambda_= 0.0):\n","\n","\n","    Theta1 = np.reshape(nn_params[:hidden_layer_size * (input_layer_size + 1)],\n","                        (hidden_layer_size, (input_layer_size + 1)))\n","\n","    Theta2 = np.reshape(nn_params[(hidden_layer_size * (input_layer_size + 1)):],\n","                        (num_labels, (hidden_layer_size + 1)))\n","\n","    m = y.size\n","\n","    J = 0\n","    Theta1_grad = np.zeros(Theta1.shape)\n","    Theta2_grad = np.zeros(Theta2.shape)\n","\n","    a1 = np.concatenate([np.ones((m, 1)), X], axis=1)\n","\n","    a2 = sigmoid(a1.dot(Theta1.T))\n","    a2 = np.concatenate([np.ones((a2.shape[0], 1)), a2], axis=1)\n","\n","    a3 = sigmoid(a2.dot(Theta2.T))\n","\n","    y_matrix = y.reshape(-1)\n","    y_matrix = np.eye(num_labels)[y_matrix]\n","\n","    temp1 = Theta1\n","    temp2 = Theta2\n","\n","     #Agregar el termino de regularización\n","\n","    reg_term = (lambda_ / (2 * m)) * (np.sum(np.square(temp1[:, 1:])) + np.sum(np.square(temp2[:, 1:])))\n","\n","    J = (-1 / m) * np.sum((np.log(a3) * y_matrix) + np.log(1 - a3) * (1 - y_matrix)) + reg_term\n","\n","     #Backpropogation\n","\n","    delta_3 = a3 - y_matrix\n","    delta_2 = delta_3.dot(Theta2)[:, 1:] * sigmoidGradient(a1.dot(Theta1.T))\n","\n","    Delta1 = delta_2.T.dot(a1)\n","    Delta2 = delta_3.T.dot(a2)\n","\n","     #Agregar regularización al gradiente\n","\n","    Theta1_grad = (1 / m) * Delta1\n","    Theta1_grad[:, 1:] = Theta1_grad[:, 1:] + (lambda_ / m) * Theta1[:, 1:]\n","\n","    Theta2_grad = (1 / m) * Delta2\n","    Theta2_grad[:, 1:] = Theta2_grad[:, 1:] + (lambda_ / m) * Theta2[:, 1:]\n","\n","\n","    grad = np.concatenate([Theta1_grad.ravel(), Theta2_grad.ravel()])\n","    print(J)\n","\n","    return J, grad"],"metadata":{"id":"nKqUtKU4G2In"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lambda_ = 0\n","if not isinstance(X, np.ndarray):\n","    X = X.to_numpy()\n","if not isinstance(y, np.ndarray):\n","    y = y.to_numpy()\n","if not isinstance(X_test, np.ndarray):\n","    X_test = X_test.to_numpy()\n","if not isinstance(y_test, np.ndarray):\n","    y_test = y_test.to_numpy()\n","J, _ = nnCostFunction(nn_params, input_layer_size, hidden_layer_size, num_labels, X, y, lambda_)\n","print('Costo en parametros (cargado de ex4weights): %.6f ' % J)\n","print('El costo debe esta cercano a               : 0.287629')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uN3knVsZHBFm","executionInfo":{"status":"ok","timestamp":1714405685652,"user_tz":240,"elapsed":2586,"user":{"displayName":"Juan Jose Monta�o Molina","userId":"08954148293048957888"}},"outputId":"1c290e73-ecda-4ca8-fad8-0975192d20b1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Costo en parametros (cargado de ex4weights): 3.022164 \n","El costo debe esta cercano a               : 0.287629\n"]}]},{"cell_type":"code","source":["z = np.array([-1, -0.5, 0, 0.5, 1])\n","g = sigmoidGradient(z)\n","print('Gradiente sigmoide evaluada con [-1 -0.5 0 0.5 1]:\\n  ')\n","print(g)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-cakCpRkJJ5-","executionInfo":{"status":"ok","timestamp":1714405688063,"user_tz":240,"elapsed":240,"user":{"displayName":"Juan Jose Monta�o Molina","userId":"08954148293048957888"}},"outputId":"e6731509-b87f-48f6-b541-1b1b0aafb8fa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Gradiente sigmoide evaluada con [-1 -0.5 0 0.5 1]:\n","  \n","[0.19661193 0.23500371 0.25       0.23500371 0.19661193]\n"]}]},{"cell_type":"code","source":["def randInitializeWeights(L_in, L_out, epsilon_init=0.12):\n","\n","    W = np.zeros((L_out, 1 + L_in))\n","    W = np.random.rand(L_out, 1 + L_in) * 2 * epsilon_init - epsilon_init\n","\n","    return W"],"metadata":{"id":"QfSXWzODMRFr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('Inicialización de parámetros de redes neuronales...')\n","\n","initial_Theta1 = randInitializeWeights(input_layer_size, hidden_layer_size)\n","initial_Theta2 = randInitializeWeights(hidden_layer_size, num_labels)\n","\n","# Desenrrollr parametros\n","initial_nn_params = np.concatenate([initial_Theta1.ravel(), initial_Theta2.ravel()], axis=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CDtdM9WgMVR_","executionInfo":{"status":"ok","timestamp":1714405694215,"user_tz":240,"elapsed":266,"user":{"displayName":"Juan Jose Monta�o Molina","userId":"08954148293048957888"}},"outputId":"55da5d0d-807d-4722-fdb3-e6d0d0076f3e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Inicialización de parámetros de redes neuronales...\n"]}]},{"cell_type":"code","source":["options= {'maxiter': 10}\n","\n","#  You should also try different values of lambda\n","lambda_ = 0\n","\n","costFunction = lambda p: nnCostFunction(p, input_layer_size,\n","                                        hidden_layer_size,\n","                                        num_labels, X, y, lambda_)\n","\n","\n","res = optimize.minimize(costFunction,\n","                        initial_nn_params,\n","                        jac=True,\n","                        method='TNC',\n","                        options=options)\n","\n","# get the solution of the optimization\n","nn_params = res.x\n","\n","# Obtain Theta1 and Theta2 back from nn_params\n","Theta1 = np.reshape(nn_params[:hidden_layer_size * (input_layer_size + 1)],\n","                    (hidden_layer_size, (input_layer_size + 1)))\n","\n","Theta2 = np.reshape(nn_params[(hidden_layer_size * (input_layer_size + 1)):],\n","                    (num_labels, (hidden_layer_size + 1)))"],"metadata":{"id":"iIanxnSSMcLf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def predict(Theta1, Theta2, X):\n","    # Useful values\n","    m = X.shape[0]\n","    num_labels = Theta2.shape[0]\n","\n","    # You need to return the following variables correctly\n","    p = np.zeros(m)\n","    h1 = sigmoid(np.dot(np.concatenate([np.ones((m, 1)), X], axis=1), Theta1.T))\n","    h2 = sigmoid(np.dot(np.concatenate([np.ones((m, 1)), h1], axis=1), Theta2.T))\n","    p = np.argmax(h2, axis=1)\n","    return p"],"metadata":{"id":"Nim2yDI7WEOT","executionInfo":{"status":"ok","timestamp":1714411218774,"user_tz":240,"elapsed":301,"user":{"displayName":"Juan Jose Monta�o Molina","userId":"08954148293048957888"}}},"execution_count":175,"outputs":[]},{"cell_type":"code","source":["pred = predict(Theta1, Theta2, X[:,:])\n","print(pred)\n","print('Training Set Accuracy: %f' % (np.mean(pred == y[:]) * 100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pqVrcfP8WN7Y","executionInfo":{"status":"ok","timestamp":1714411222131,"user_tz":240,"elapsed":1434,"user":{"displayName":"Juan Jose Monta�o Molina","userId":"08954148293048957888"}},"outputId":"ff9fcd0c-26a1-4b14-84e2-fcd5e3a1671a"},"execution_count":176,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-150-469fde07f2f5>:2: RuntimeWarning: overflow encountered in exp\n","  return 1.0 / (1.0 + np.exp(-z))\n"]},{"output_type":"stream","name":"stdout","text":["[0 0 0 ... 0 0 0]\n","Training Set Accuracy: 93.988001\n"]}]},{"cell_type":"code","source":["pred = predict(Theta1, Theta2, X_test[:,:])\n","print(pred)\n","print('Training Set Accuracy: %f' % (np.mean(pred == y_test[:]) * 100))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lkDer0mrWP61","executionInfo":{"status":"ok","timestamp":1714411225461,"user_tz":240,"elapsed":663,"user":{"displayName":"Juan Jose Monta�o Molina","userId":"08954148293048957888"}},"outputId":"fff609bf-6f04-4808-895d-751c6570ed16"},"execution_count":177,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 0 0 ... 0 0 0]\n","Training Set Accuracy: 91.518474\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-150-469fde07f2f5>:2: RuntimeWarning: overflow encountered in exp\n","  return 1.0 / (1.0 + np.exp(-z))\n"]}]}]}